name: Release builds

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  release-builds:
    name: Build ${{ matrix.build }} release

    strategy:
      matrix:
        include:
          - build: macOS Apple Silicon
            os: macos-latest
            target: aarch64-apple-darwin

          - build: macOS Intel
            os: macos-latest
            target: x86_64-apple-darwin

          - build: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: Windows
            os: windows-latest
            target: x86_64-pc-windows-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable # Don't use actions-rs/toolchain@v1 because it's not working for Windows and macOS Apple Silicon
        with:
          targets: ${{ matrix.target }}

      - name: Build (Linux and macOS)
        if: ${{ matrix.build != 'Windows' }} # Don't use double quotes
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build (Windows)
        if: ${{ matrix.build == 'Windows' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Get the release version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Prepare release
        shell: bash
        run: |
          binary_name="jty-converter"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
